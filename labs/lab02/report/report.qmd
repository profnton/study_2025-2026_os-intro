---
# Preamble

## Author
author:
  name: Емельянов Антон
  degrees: DSc
  orcid: 0000-0002-0877-7063
  email: profanton97@gmail.com
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6
## Title
title: "Лабораторная работа №2"
subtitle: "Первоначальная настройка git"
license: "CC BY"
## Generic options
lang: ru-RU
number-sections: true
toc: true
toc-title: "Содержание"
toc-depth: 2
## Crossref customization
crossref:
  lof-title: "Список иллюстраций"
  lot-title: "Список таблиц"
  lol-title: "Листинги"
## Bibliography
bibliography:
  - bib/cite.bib
csl: _resources/csl/gost-r-7-0-5-2008-numeric.csl
format:
## Pdf output format
  pdf:
    toc: true
    number-sections: true
    colorlinks: false
    toc-depth: 2
    lof: true # List of figures
    lot: true # List of tables
### Document
    documentclass: scrreprt
    papersize: a4
    fontsize: 12pt
    linestretch: 1.5
### Language
    babel-lang: russian
    babel-otherlangs: english
### Biblatex
    cite-method: biblatex
    biblio-style: gost-numeric
    biblatexoptions:
      - backend=biber
      - langhook=extras
      - autolang=other*
### Misc options
    csquotes: true
    indent: true
    header-includes: |
      \usepackage{indentfirst}
      \usepackage{float}
      \floatplacement{figure}{H}
      \usepackage[math,RM={Scale=0.94},SS={Scale=0.94},SScon={Scale=0.94},TT={Scale=MatchLowercase,FakeStretch=0.9},DefaultFeatures={Ligatures=Common}]{plex-otf}
## Docx output format
  docx:
    toc: true
    number-sections: true
    toc-depth: 2
---

# Цель работы
Изучить идеологию и применение средств контроля версий. Освоить умения по работе с git..

# Задание

Здесь приводится описание задания в соответствии с рекомендациями методического пособия и выданным вариантом.

# Теоретическое введение

Здесь описываются теоретические аспекты, связанные с выполнением работы.

Например, в [табл. @tbl-std-dir] приведено краткое описание стандартных каталогов Unix.

| Имя каталога | Описание каталога                                                                                                          |
|--------------|----------------------------------------------------------------------------------------------------------------------------|
| `/`          | Корневая директория, содержащая всю файловую                                                                               |
| `/bin `      | Основные системные утилиты, необходимые как в однопользовательском режиме, так и при обычной работе всем пользователям     |
| `/etc`       | Общесистемные конфигурационные файлы и файлы конфигурации установленных программ                                           |
| `/home`      | Содержит домашние директории пользователей, которые, в свою очередь, содержат персональные настройки и данные пользователя |
| `/media`     | Точки монтирования для сменных носителей                                                                                   |
| `/root`      | Домашняя директория пользователя  `root`                                                                                   |
| `/tmp`       | Временные файлы                                                                                                            |
| `/usr`       | Вторичная иерархия для данных пользователя                                                                                 |

: Описание некоторых каталогов файловой системы GNU Linux {#tbl-std-dir}

Более подробно про Unix см. в [@tanenbaum_book_modern-os_ru; @robbins_book_bash_en; @zarrelli_book_mastering-bash_en; @newham_book_learning-bash_en].

# Выполнение лабораторной работы

Научиться оформлять отчёты с помощью легковесного языка разметки Markdown.
Переместимся в каталог 2 лабы
Откроем файл report.qmd и начнём исправлять его, превращая его в отчёт по лабе 2
используем make, чтобы создать pdf и docx
Затем загружаем файлы на github
В ходе работы с языком разметки markdown были получены базовые навыки редактуры и обращения с отчётами
Лабораторная работа №2
Первоначальная настройка git
Изучить идеологию и применение средств контроля версий. Освоить умения по работе с git.
Начнём установку ПО с git:
([рис. @fig-001])

Далее установим gh, а также внесём всю базовую информацию: имя глобального пользователя, адрес электронной почты, настроим utf-8 в выводе сообщений git. Зададим имя начальной ветки (master) и установим параметры autocrlf и safecrlf 

([рис. @fig-002])

([рис. @fig-003])

Сгенерируем ключи размера 4096 по алгоритму RSA и по алгоритму ed25519, также сгенерируем pgp ключ, он понадобится для дальней привязки github. Заодно не забудем зарегистрироваться на github (у меня уже была регистрация, но в данном случае это почти ничего не меняет, так как делаю я с новой виртуальной машины).

([рис. @fig-004])

([рис. @fig-005])

([рис. @fig-006])

([рис. @fig-007])

Теперь добавили ключ на Github, таким образом подключили систему к Github.

([рис. @fig-008])

Настроим автоматические подписи коммитов Git, заставим Git использовать мой email для подписи коммитов.

([рис. @fig-009])

Произведём авторизацию и создадим шаблон рабочего пространства, для этого создадим папку и в ней образуем репозиторий, скопируем репозиторий и, перейдя в каталог курса, удалим всё лишнее и создадим каталоги.

([рис. @fig-010])

([рис. @fig-011])

([рис. @fig-012])

([рис. @fig-013])

Затем отправим файлы на сервер.

([рис. @fig-014])

![Установка git прошла успешно.](image/1gitinst.png){#fig-001 width=70%}
![Установка gh прошла успешно.](image/2ghinst.png){#fig-001 width =70%}
![Внесли все базовые параметры.](image/3basegit.png){#fig-001 width =70%}
![SSH ключи сгенерированы по алгоритмам RSA и ed25519.](image/4sshkey.png){#fig-001 width =70%}
![Предложили защитить всё паролем.](image/5pass.png){#fig-001 width =70%}
![Сгенерирован pgp ключ.](image/6keydone.png){#fig-001 width =70%}
![Github “Заведён” и готов к использованию.](image/7githubpic.png){#fig-001 width =70%}
![лючик добавлен.](image/8githubdone.png){#fig-001 width =70%}
![Теперь должен правильно подписывать commit-ы](image/9sign.png){#fig-001 width =70%}
![Подрубаем github.](image/10githurray.png){#fig-001 width =70%}
![Создаём репозиторий курса.](image/11ghrepo.png){#fig-001 width =70%}
![Копируем всё и кое-что удаляем](image/12gitclone.png){#fig-001 width =70%}
![ереходим в каталог курса и готовимся к финальному рывку](image/13cdosintro.png){#fig-001 width =70%}
![Подтверждаем и отправляем всё. Изменения отразились, УРА](image/14pushend.png){#fig-001 width =70%}

# Выводы

В этой лабораторной работе мы успешно создали и настроили систему контроля версий Git, её окружение и организовали её взаимодействие с Github.

Что такое системы контроля версий (VCS) и для решения каких задач они предназначаются?
VCS используется для контроля изменения файлов во времени, их основная задача - контроль версий, сравнение, возврат, совместная работа, ветвление и резервное копирование
   Объясните следующие понятия VCS и их отношения: хранилище, commit, история, рабочая копия.
Хранилище = все версии проекта, а также история их изменений
Commit = снимок состояния проекта в момент времени
История = последовательность Commit-ов

# Список литературы{.unnumbered}

::: {#refs}
:::
